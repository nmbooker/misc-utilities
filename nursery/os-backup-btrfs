#! /usr/bin/env perl

# Back up OS on btrfs filesystem

use v5.20;
use warnings;
use strict;
use feature 'signatures';
no warnings 'experimental::signatures';
use autodie;

use Cwd qw/cwd/;
use Cwd::Guard qw/cwd_guard/;
use DateTime;
use Sys::Hostname;
use File::Spec::Functions qw/catfile/;
use Try::Tiny;
use LockFile::Simple qw/trylock unlock/;
use Data::Dumper;
use File::Slurp qw/read_file write_file/;
use Set::Scalar;
use File::Glob qw/:bsd_glob/;
use Carp qw/carp/;

use subs qw/with_snapshot with_lock with_bind in_dir/;

my $options = get_options();

sub next_increment_base {
    my @incs = finished_increments();
    return $incs[-1];
}

sub record_increment($dir, $basename) {
    write_file(catfile($dir, '.increments'),
        {append => 1}, $basename."\n");
}

sub reap($archive_basename) {
    say STDERR "reap unfinished archive: $archive_basename";
    my @slices = (bsd_glob("$archive_basename.*.dar"), bsd_glob("$archive_basename.*.dar.sha1"));
    unless (@slices) {
        carp "(reap) no slices to delete reaping $archive_basename";
        return;
    }
    my @cmd = ('rm', @slices);
    say Dumper(\@cmd) if $options->{verbose} >= 2;
    system @cmd unless $options->{dryrun};
    say STDERR "reaped $archive_basename";
}

sub archives {
    Set::Scalar->new(map { dar_basename($_) } slices_in_cwd())->members
}

sub slices_in_cwd { bsd_glob('*.*.dar') }   # run in correct working directory

sub finished_increments {
    read_file('.increments', err_mode => 'carp', chomp => 1)
}

sub dead_archives {
    my $finished = Set::Scalar->new(finished_increments());
    my $archives = Set::Scalar->new(archives());
    return $archives->difference($finished)->members;
}

sub dar_basename($slicename) {
    $slicename =~ s/\.[0-9]+\.dar(\.sha1)?//r
}

my $lockfile = "/var/run/os-backup-btrfs.lock";
with_lock $lockfile => sub {
    my $time = DateTime->now();
    with_snapshot '/', '/_snap_os_backup' => sub($root, $snapshot) {
        with_bind '/boot', catfile($snapshot, 'boot'), sub {
            my $month = $time->strftime('%Y-%m');
            my $stamp = $time->strftime('%Y-%m-%d_%H:%M:%S');
            my $hostname = hostname();
            my $backup_basedir = '/data/os-backup';
            my $backup_basedir_in_snapshot = $backup_basedir;
            $backup_basedir_in_snapshot =~ s|^/+||g;
            my $targetdir = catfile($backup_basedir, $hostname, $month);
            system qw/mkdir -p/, $targetdir;
            in_dir $targetdir => sub {
                say STDERR "$0: cwd: ".cwd() if $options->{verbose} >= 2;
                reap($_) for dead_archives();
                my $refbase = next_increment_base();
                my $backup_type = defined($refbase) ? 'inc' : 'full';
                my $basename = sprintf('%s_os-backup_%s_%s', $hostname, $backup_type, $stamp);
                my @prune = (qw[tmp var/tmp data], $backup_basedir_in_snapshot);
                my @nocompress = qw(
                    *.gz *.bz2 *.xz *.tgz *.txz *.tbz2
                    *.tif *.tiff *.png *.jpg *.jpeg
                    *.ogg *.ogv *.mp3 *.flac
                    vmlinuz* initrd.img-*
                );
                my @cmd = (
                    'dar', '-c', $basename,
                    (map { (-A => $_ ) } grep { defined } $refbase),
                    '-s', '1G',
                    '-z',
                    '-R', $snapshot,
                    (map { ('-P' => $_) } @prune),
                    (map { ('-Z' => $_) } @nocompress),
                    '-3', 'sha1',
                );
                push @cmd, '-q' if $options->{silent};
                say STDERR Dumper(\@cmd) if $options->{verbose} >= 2;
                return if $options->{dryrun};
                my $retval = system(@cmd);
                if ($retval == 0 or $retval == 11) {
                    say STDERR "$0: dar backup succeeded with status $retval." unless $options->{silent};
                    say STDERR "$0: one or more file changed while backing it up" if $retval == 11;
                    say STDERR "$0: Recording finished increment..." if $options->{verbose};
                    record_increment($targetdir, $basename);
                }
                else {
                    say STDERR "$0: dar failed with status $retval";
                }
            };
            say STDERR "$0: cwd: ".cwd() if $options->{verbose} >= 2;
        };
    };
};

sub with_bind($orig, $mountpoint, $code) {
    system qw/mount --bind/, $orig, $mountpoint;
    my $cleanup = sub {
        try { system 'umount', $mountpoint }
        catch {
            warn "$0: umount $mountpoint failed: $_";
        };
    };
    try { $code->() } catch {
        $cleanup->();
        die $_;
    } ;
    $cleanup->();
}

sub with_snapshot($orig, $snapshot, $code) {
    system qw( btrfs subvolume snapshot -r ), $orig, $snapshot;
    my $cleanup = sub {
        try { system qw( btrfs subvolume delete ), $snapshot }
        catch {
            warn "$0: Removal of snapshot $snapshot failed: $_";
        };
    };
    try {
        $code->($orig, $snapshot);
    } catch {
        $cleanup->();
        die $_;
    };
    $cleanup->();
}

sub with_lock($file, $code) {
    my $lock = trylock($file) or die "$0: Cannot lock $file: $!\n";
    try {
        $code->();
    } catch {
        $lock->release;
        die $_;
    };
    $lock->release; 
}

sub in_dir($dir, $code) {
    my $guard = cwd_guard($dir);
    $code->();
}


sub get_options {
    use File::Basename qw(basename);
    use Getopt::Long;
    use Pod::Usage;

    my $prog = basename($0);  # can be used in error messages

    my $options = {
        help => 0,
        man => 0,
        verbose => 0,
        dryrun => 0,
        silent => 0,
    };

    Getopt::Long::Configure(qw{gnu_getopt});
    my $parsed_ok = GetOptions(
        'h|help'    =>  \$options->{help},
        'man'       =>  \$options->{man},
        'v|verbose+' =>  \$options->{verbose},
        'dryrun'    =>  \$options->{dryrun},
        'silent'    =>  \$options->{silent},
    );

    pod2usage(-exitval => 2) unless $parsed_ok;

    # Note -output defaults to *STDOUT if -exitval is 0 or 1.
    # See the documentation for Pod::Usage under DESCRIPTION.
    pod2usage(-exitval => 1, -verbose => 1) if $options->{help};
    pod2usage(-exitval => 1, -verbose => 2) if $options->{man};

    # Process remaining arguments from @ARGV here, adding results
    # to $options.

    return $options;
}

__END__

=head1 NAME

os-backup-btrfs - Back up OS on btrfs filesystem

=head1 SYNOPSIS

os-backup-btrfs [options]

 Options:
    -h, --help              brief help message
    --man                   full documentation

    -v, --verbose           once to output status messages, again to output command line arguments
    --dryrun                don't create or delete any archives (note snapshots are still created!)
    --silent                skip dar summary report and "dar backup succeeded" message

=head1 OPTIONS

=over 8

=item B<--help> or B<-h>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.

=item B<--verbose> or B<-v>

If provided once, progress messages are printed.

A second occurrence of B<-v> causes the command lines to be printed before each command too.
This is useful with B<--dry-run> for debugging.

=item B<--dryrun>

Don't create or remove any archives.  Note that other actions, such as creating and
removing snapshots, mounting and unmounting data, and creating target directories, are still
performed.

=item B<--silent>

Suppress success message at the end.
Also suppresses C<dar>'s summary report (C<dar -q>)

It doesn't silence error messages and warnings.

Once I've worked out how to silence C<btrfs subvolume> this will ensure you don't get mailed
from cron unless something fails.
Watch this space (I also welcome pull requests).

Note this does not conflict with B<--verbose>

=back

=head1 DESCRIPTION

B<os-backup-btrfs> will back up the running Linux operating system to a dar
archive in C</data/os-backup/$HOSTNAME>, assuming the root filesystem is on btrfs.

It assumes you don't want to back up /data, and tries to be intelligent about
the OS directories it backs up (for example /tmp and /var/tmp are pruned out),
and about which files to compress in the archive for speed.

It's extremely experimental so I'm not going to document here precisely what it
does: see the source code for the latest on that.

=cut

#! /usr/bin/env perl

# Back up OS on btrfs filesystem
#
# apt-get install dar par2 liblockfile-simple-perl libdatetime-perl libtry-tiny-perl

use v5.20;
use warnings;
use strict;
use feature 'signatures';
no warnings 'experimental::signatures';
use autodie;

use DateTime;
use Sys::Hostname;
use File::Spec::Functions qw/catfile/;
use Try::Tiny;
use LockFile::Simple qw/trylock unlock/;
use Data::Dumper;

use subs qw/with_snapshot with_lock with_bind/;

my $options = get_options();

my $lockfile = "/var/run/os-backup-btrfs";
with_lock $lockfile => sub {
    my $time = DateTime->now();
    with_snapshot '/', '/_snap_os_backup' => sub($root, $snapshot) {
        with_bind '/boot', catfile($snapshot, 'boot'), sub {
            my $stamp = $time->strftime('%Y-%m-%d_%H:%M:%S');
            my $hostname = hostname();
            my $backup_basedir = '/data/os-backup';
            my $backup_basedir_in_snapshot = $backup_basedir;
            $backup_basedir_in_snapshot =~ s|^/+||g;
            my $targetdir = catfile($backup_basedir, $hostname);
            system qw/mkdir -p/, $targetdir;
            my $target = catfile(
                $targetdir,
                $hostname.'_os-backup_'.$stamp
            );
            my @prune = (qw[tmp var/tmp data], $backup_basedir_in_snapshot);
            my @nocompress = qw(
                *.gz *.bz2 *.xz *.tgz *.txz *.tbz2
                *.tif *.tiff *.png *.jpg *.jpeg
                *.ogg *.ogv *.mp3 *.flac
                vmlinuz* initrd.img-*
            );
            my @cmd = (
                'dar', '-c', $target,
                '-s', '1G',
                '-z',
                '-R', $snapshot,
                (map { ('-P' => $_) } @prune),
                (map { ('-Z' => $_) } @nocompress),
                '-3', 'sha1',
            );
            say STDERR Dumper(\@cmd);
            system @cmd;
        };
    };
};

sub with_bind($orig, $mountpoint, $code) {
    system qw/mount --bind/, $orig, $mountpoint;
    my $cleanup = sub {
        try { system 'umount', $mountpoint }
        catch {
            warn "$0: umount $mountpoint failed: $_";
        };
    };
    try { $code->() } catch {
        $cleanup->();
        die $_;
    } ;
    $cleanup->();
}

sub with_snapshot($orig, $snapshot, $code) {
    system qw( btrfs subvolume snapshot -r ), $orig, $snapshot;
    my $cleanup = sub {
        try { system qw( btrfs subvolume delete ), $snapshot }
        catch {
            warn "$0: Removal of snapshot $snapshot failed: $_";
        };
    };
    try {
        $code->($orig, $snapshot);
    } catch {
        $cleanup->();
        die $_;
    };
    $cleanup->();
}

sub with_lock($file, $code) {
    my $lock = trylock($file) or die "$0: Cannot lock $file: $!\n";
    try {
        $code->();
    } catch {
        $lock->release;
        die $_;
    };
    $lock->release; 
}

sub get_options {
    use File::Basename qw(basename);
    use Getopt::Long;
    use Pod::Usage;

    my $prog = basename($0);  # can be used in error messages

    my $options = {
        help => 0,
        man => 0,
        # add further options here with their default values
    };

    Getopt::Long::Configure(qw{gnu_getopt});
    my $parsed_ok = GetOptions(
        'h|help'    =>  \$options->{help},
        'man'       =>  \$options->{man},
        # specify further options here with references to their values in the $options hashref
    );

    pod2usage(-exitval => 2) unless $parsed_ok;

    # Note -output defaults to *STDOUT if -exitval is 0 or 1.
    # See the documentation for Pod::Usage under DESCRIPTION.
    pod2usage(-exitval => 1, -verbose => 1) if $options->{help};
    pod2usage(-exitval => 1, -verbose => 2) if $options->{man};

    # Process remaining arguments from @ARGV here, adding results
    # to $options.

    return $options;
}

__END__

=head1 NAME

os-backup-btrfs - BRIEF_DESCRIPTION

=head1 SYNOPSIS

os-backup-btrfs [options]

 Options:
    -h, --help              brief help message
    --man                   full documentation

=head1 OPTIONS

=over 8

=item B<--help> or B<-h>

Print a brief help message and exit.

=item B<--man>

Print the manual page and exit.


=back

=head1 DESCRIPTION

B<os-backup-btrfs> will ...

=cut
